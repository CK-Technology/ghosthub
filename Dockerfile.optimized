# Multi-stage build for optimized production image
# Build stage 1: Frontend build with caching
FROM rust:1.82-slim AS frontend-cache

# Install essential dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install trunk and wasm tools
RUN cargo install trunk wasm-bindgen-cli
RUN rustup target add wasm32-unknown-unknown

WORKDIR /app

# Copy only dependency files first for better caching
COPY Cargo.toml ./
COPY shared/Cargo.toml ./shared/
COPY frontend/Cargo.toml ./frontend/

# Create dummy source files to build dependencies
RUN mkdir -p shared/src frontend/src && \
    echo "fn main() {}" > shared/src/lib.rs && \
    echo "fn main() {}" > frontend/src/main.rs

# Build dependencies only
RUN cd frontend && cargo fetch

# Build stage 2: Frontend application
FROM frontend-cache AS frontend-build

# Copy actual source files
COPY shared ./shared/
COPY frontend ./frontend/

# Build the frontend with optimizations
RUN cd frontend && \
    CARGO_PROFILE_RELEASE_LTO=true \
    CARGO_PROFILE_RELEASE_CODEGEN_UNITS=1 \
    CARGO_PROFILE_RELEASE_PANIC=abort \
    trunk build --release

# Build stage 3: Backend cache
FROM rust:1.82-slim AS backend-cache

# Install build dependencies with specific versions
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libpq-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy dependency files for caching
COPY Cargo.toml ./
COPY shared/Cargo.toml ./shared/
COPY backend/Cargo.toml ./backend/

# Create dummy source files
RUN mkdir -p shared/src backend/src && \
    echo "fn main() {}" > shared/src/lib.rs && \
    echo "fn main() {}" > backend/src/main.rs

# Fetch dependencies
RUN cd backend && cargo fetch

# Build stage 4: Backend application  
FROM backend-cache AS backend-build

# Copy SQLx prepared queries for offline compilation
COPY backend/.sqlx ./backend/.sqlx/

# Copy actual source files
COPY shared ./shared/
COPY backend/src ./backend/src/
COPY backend/migrations ./backend/migrations/

# Set environment for offline compilation
ENV SQLX_OFFLINE=true

# Build with maximum optimizations
RUN cd backend && \
    CARGO_PROFILE_RELEASE_LTO=true \
    CARGO_PROFILE_RELEASE_CODEGEN_UNITS=1 \
    CARGO_PROFILE_RELEASE_PANIC=abort \
    CARGO_PROFILE_RELEASE_STRIP=true \
    cargo build --release

# Runtime stage - minimal distroless image
FROM gcr.io/distroless/cc-debian12 AS runtime

# Create non-root user
USER nonroot:nonroot

# Copy backend binary
COPY --from=backend-build --chown=nonroot:nonroot /app/target/release/ghosthub-backend /usr/local/bin/ghosthub-backend

# Copy migrations
COPY --from=backend-build --chown=nonroot:nonroot /app/backend/migrations /app/migrations

# Set environment variables
ENV DATABASE_URL="postgresql://ghosthub:ghosthub@db:5432/ghosthub"
ENV SERVER_ADDR="0.0.0.0:8080"
ENV RUST_LOG=info
ENV RUST_BACKTRACE=1

EXPOSE 8080

ENTRYPOINT ["/usr/local/bin/ghosthub-backend"]

# Final stage - nginx + app for single container deployment
FROM nginx:1.25-alpine AS production

# Install supervisor for process management
RUN apk add --no-cache supervisor ca-certificates libgcc

# Create non-root user
RUN addgroup -g 1001 -S appgroup && \
    adduser -S appuser -G appgroup -u 1001

# Copy optimized nginx configuration
COPY docker/nginx.conf /etc/nginx/nginx.conf
COPY docker/nginx-prod.conf /etc/nginx/conf.d/default.conf

# Copy frontend static files with proper ownership
COPY --from=frontend-build --chown=appuser:appgroup /app/frontend/dist /var/www/html

# Copy backend binary with proper ownership  
COPY --from=backend-build --chown=appuser:appgroup /app/target/release/ghosthub-backend /usr/local/bin/ghosthub-backend

# Copy migrations with proper ownership
COPY --from=backend-build --chown=appuser:appgroup /app/backend/migrations /app/migrations

# Copy production supervisor configuration
COPY docker/supervisord-prod.conf /etc/supervisord.conf

# Create necessary directories with proper permissions
RUN mkdir -p /var/log/supervisor /var/run /app/logs && \
    chown -R appuser:appgroup /var/log/supervisor /var/run /app/logs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Production environment variables
ENV DATABASE_URL="postgresql://ghosthub:ghosthub@db:5432/ghosthub"
ENV SERVER_ADDR="127.0.0.1:8080"
ENV RUST_LOG=warn
ENV NGINX_WORKER_PROCESSES=auto
ENV NGINX_WORKER_CONNECTIONS=1024

EXPOSE 80

# Use supervisor to run both nginx and the backend app
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisord.conf", "-n"]
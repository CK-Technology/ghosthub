name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ghosthub_test
  REDIS_URL: redis://localhost:6379

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ghosthub_test
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install SQLx CLI
      run: cargo install sqlx-cli --no-default-features --features rustls,postgres

    - name: Run database migrations
      working-directory: ./backend
      run: |
        sqlx database create
        sqlx migrate run

    - name: Check formatting
      working-directory: ./backend
      run: cargo fmt -- --check

    - name: Run clippy
      working-directory: ./backend
      run: cargo clippy -- -D warnings

    - name: Build backend
      working-directory: ./backend
      run: cargo build --verbose

    - name: Run unit tests
      working-directory: ./backend
      run: cargo test --lib tests::unit --verbose

    - name: Run integration tests
      working-directory: ./backend
      run: cargo test tests::integration --verbose

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-wasm-${{ hashFiles('**/Cargo.lock') }}

    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

    - name: Install trunk
      run: cargo install trunk

    - name: Check formatting
      working-directory: ./frontend
      run: cargo fmt -- --check

    - name: Run clippy
      working-directory: ./frontend
      run: cargo clippy --target wasm32-unknown-unknown -- -D warnings

    - name: Build frontend
      working-directory: ./frontend
      run: trunk build --release

    - name: Run tests
      working-directory: ./frontend
      run: wasm-pack test --headless --firefox

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Run security audit
      run: cargo audit

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ghosthub_test
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Install SQLx CLI
      run: cargo install sqlx-cli --no-default-features --features rustls,postgres

    - name: Run database migrations
      working-directory: ./backend
      run: |
        sqlx database create
        sqlx migrate run

    - name: Generate code coverage
      working-directory: ./backend
      run: cargo tarpaulin --verbose --all-features --workspace --timeout 300 --out xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/cobertura.xml
        fail_ci_if_error: false

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: ghosthub:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-audit]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        # Add your staging deployment logic here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-audit, docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production environment..."
        # Add your production deployment logic here